// Code generated by goa v3.20.1, DO NOT EDIT.
//
// message service
//
// Command:
// $ goa gen
// github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/design

package message

import (
	"context"

	messageviews "github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/gen/message/views"
)

// simple message service
type Service interface {
	// Create implements create.
	Create(context.Context, *CreatePayload) (res *Message, err error)
	// List implements list.
	List(context.Context) (res []*Message, err error)
	// Read implements read.
	Read(context.Context, *ReadPayload) (res *Message, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "message"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "message"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"create", "list", "read"}

// CreatePayload is the payload type of the message service create method.
type CreatePayload struct {
	// Message text
	Text string
}

// Message is the result type of the message service create method.
type Message struct {
	// UUID of the message
	ID string
	// Message text
	Text string
}

type NotFoundError struct {
	// error message
	Message string
}

// ReadPayload is the payload type of the message service read method.
type ReadPayload struct {
	// UUID of the message
	ID string
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// NewMessage initializes result type Message from viewed result type Message.
func NewMessage(vres *messageviews.Message) *Message {
	return newMessage(vres.Projected)
}

// NewViewedMessage initializes viewed result type Message from result type
// Message using the given view.
func NewViewedMessage(res *Message, view string) *messageviews.Message {
	p := newMessageView(res)
	return &messageviews.Message{Projected: p, View: "default"}
}

// newMessage converts projected type Message to service type Message.
func newMessage(vres *messageviews.MessageView) *Message {
	res := &Message{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Text != nil {
		res.Text = *vres.Text
	}
	return res
}

// newMessageView projects result type Message to projected type MessageView
// using the "default" view.
func newMessageView(res *Message) *messageviews.MessageView {
	vres := &messageviews.MessageView{
		ID:   &res.ID,
		Text: &res.Text,
	}
	return vres
}
