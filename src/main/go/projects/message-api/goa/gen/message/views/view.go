// Code generated by goa v3.20.1, DO NOT EDIT.
//
// message views
//
// Command:
// $ goa gen
// github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Message is the viewed result type that is projected based on a view.
type Message struct {
	// Type to project
	Projected *MessageView
	// View to render
	View string
}

// MessageView is a type that runs validations on a projected type.
type MessageView struct {
	// UUID of the message
	ID *string
	// Message text
	Text *string
}

var (
	// MessageMap is a map indexing the attribute names of Message by view name.
	MessageMap = map[string][]string{
		"default": {
			"id",
			"text",
		},
	}
)

// ValidateMessage runs the validations defined on the viewed result type
// Message.
func ValidateMessage(result *Message) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMessageView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMessageView runs the validations defined on MessageView using the
// "default" view.
func ValidateMessageView(result *MessageView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "result"))
	}
	return
}
