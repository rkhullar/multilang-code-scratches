// Code generated by goa v3.20.1, DO NOT EDIT.
//
// message HTTP server types
//
// Command:
// $ goa gen
// github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/design

package server

import (
	"unicode/utf8"

	message "github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/gen/message"
	messageviews "github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/gen/message/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "message" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Message text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// CreateResponseBody is the type of the "message" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// UUID of the message
	ID string `form:"id" json:"id" xml:"id"`
	// Message text
	Text string `form:"text" json:"text" xml:"text"`
}

// ListResponseBody is the type of the "message" service "list" endpoint HTTP
// response body.
type ListResponseBody []*MessageResponse

// ReadResponseBody is the type of the "message" service "read" endpoint HTTP
// response body.
type ReadResponseBody struct {
	// UUID of the message
	ID string `form:"id" json:"id" xml:"id"`
	// Message text
	Text string `form:"text" json:"text" xml:"text"`
}

// ReadNotFoundResponseBody is the type of the "message" service "read"
// endpoint HTTP response body for the "not_found" error.
type ReadNotFoundResponseBody struct {
	// error message
	Message string `form:"message" json:"message" xml:"message"`
}

// MessageResponse is used to define fields on response body types.
type MessageResponse struct {
	// UUID of the message
	ID string `form:"id" json:"id" xml:"id"`
	// Message text
	Text string `form:"text" json:"text" xml:"text"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "message" service.
func NewCreateResponseBody(res *messageviews.MessageView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:   *res.ID,
		Text: *res.Text,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "message" service.
func NewListResponseBody(res []*message.Message) ListResponseBody {
	body := make([]*MessageResponse, len(res))
	for i, val := range res {
		body[i] = marshalMessageMessageToMessageResponse(val)
	}
	return body
}

// NewReadResponseBody builds the HTTP response body from the result of the
// "read" endpoint of the "message" service.
func NewReadResponseBody(res *messageviews.MessageView) *ReadResponseBody {
	body := &ReadResponseBody{
		ID:   *res.ID,
		Text: *res.Text,
	}
	return body
}

// NewReadNotFoundResponseBody builds the HTTP response body from the result of
// the "read" endpoint of the "message" service.
func NewReadNotFoundResponseBody(res *message.NotFoundError) *ReadNotFoundResponseBody {
	body := &ReadNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreatePayload builds a message service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *message.CreatePayload {
	v := &message.CreatePayload{
		Text: *body.Text,
	}

	return v
}

// NewReadPayload builds a message service read endpoint payload.
func NewReadPayload(id string) *message.ReadPayload {
	v := &message.ReadPayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	if body.Text != nil {
		if utf8.RuneCountInString(*body.Text) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.text", *body.Text, utf8.RuneCountInString(*body.Text), 1, true))
		}
	}
	return
}
