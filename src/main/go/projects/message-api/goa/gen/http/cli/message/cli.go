// Code generated by goa v3.20.1, DO NOT EDIT.
//
// message HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	messagec "github.com/rkhullar/python-java-scratches/src/main/go/projects/message-api/goa/gen/http/message/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `message (create|list|read)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` message create --body '{
      "text": "g"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		messageFlags = flag.NewFlagSet("message", flag.ContinueOnError)

		messageCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		messageCreateBodyFlag = messageCreateFlags.String("body", "REQUIRED", "")

		messageListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		messageReadFlags  = flag.NewFlagSet("read", flag.ExitOnError)
		messageReadIDFlag = messageReadFlags.String("id", "REQUIRED", "UUID of the message")
	)
	messageFlags.Usage = messageUsage
	messageCreateFlags.Usage = messageCreateUsage
	messageListFlags.Usage = messageListUsage
	messageReadFlags.Usage = messageReadUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "message":
			svcf = messageFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "message":
			switch epn {
			case "create":
				epf = messageCreateFlags

			case "list":
				epf = messageListFlags

			case "read":
				epf = messageReadFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "message":
			c := messagec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = messagec.BuildCreatePayload(*messageCreateBodyFlag)
			case "list":
				endpoint = c.List()
			case "read":
				endpoint = c.Read()
				data, err = messagec.BuildReadPayload(*messageReadIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// messageUsage displays the usage of the message command and its subcommands.
func messageUsage() {
	fmt.Fprintf(os.Stderr, `simple message service
Usage:
    %[1]s [globalflags] message COMMAND [flags]

COMMAND:
    create: Create implements create.
    list: List implements list.
    read: Read implements read.

Additional help:
    %[1]s message COMMAND --help
`, os.Args[0])
}
func messageCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] message create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s message create --body '{
      "text": "g"
   }'
`, os.Args[0])
}

func messageListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] message list

List implements list.

Example:
    %[1]s message list
`, os.Args[0])
}

func messageReadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] message read -id STRING

Read implements read.
    -id STRING: UUID of the message

Example:
    %[1]s message read --id "Quae perspiciatis repudiandae."
`, os.Args[0])
}
